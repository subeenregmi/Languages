Boolean Conditions/Operators 

True, False
&& - and 
|| - or 
/= - not equals to 
== - equals to
not (_) - nots the conditions 

DEFINITIONS AND INTERESTING STUFF
---------------------------------

Infix function - a function that is sandwiched between two operands
Prefix function - a function where parameters come after the function

Function Application - Passing paramaters to a function (this has the highest precidence when using functions in statements)

Functions cannot start with CAPITAL Letters
Use of ' is valid for function naming
If a function name ends with ' this means that the function isnt lazy or has been modified from the original. 

Strings are just a list of characters. 

Dont use floats in ranges as they can result into lost precision

Use tuples when you know how much elements go into the tuple and if they vary in types.

If you want to find out the type of a infix operator you have to use parenthesis to surround the operator.

When pattern matching make sure you define specific cases first and above the general case, this way the cases can be run properly.

FUNCTIONS/KEYWORDS
-------------------
succ {int} -> function that returns the next element after the provided parameter, e.g: succ 8 == 9

pred {int} -> function that returns the previous element befroe the provided element, only works when the element has an instance of the Enum typeclass 

min {num1} {num2} -> function that returns the lesser of the two numbers, e.g: min 3 5 == 3

max {num1} {num2} -> function that returns the greater of the two numbers, e.g: max 2 5 == 5

let (expression) -> this is used in ghci to store a value.

head {list} -> returns the first element of a list

tail {list} -> returns all elements that are not the head.

last {list} -> returns the last element of a list

init {list} -> returns all elements without the last element

length {list} -> returns length of a list

null {list} -> returns true if the list is empty 
	e.g: null [2, 3, 4] == False
		 null [] == True

reverse {list} -> reverses a given list

take {items} {list} -> extracts that many items from the start of the list

drop {items} {list} -> removes the number of items from the start of the list and returns the remaining items

maximum {list} -> returns the max item in a list
minimum {list} -> returns the min item in a list

sum {list} -> returns the sum of all the elements in a list 
product {list} -> returns the products of all elements in a list

elem {item} {list} -> returns true or false whether item is in a list
	e.g: elem 5 [1, 2, 5] == True
		 elem 6 [1, 2, 5] == False
		 5 `elem` [1, 2, 5] == True

cycle {list} -> returns an infinite list of repeated concatenated lists

	e.g: cycle [1, 2, 3] == [1, 2, 3, 1, 2, 3, 1, 2, 3, ...]

repeat {item} -> returns an infinite list consisting of only the item provided

	e.g: repeat 3 == [3, 3, 3, 3, 3, 3, 3, 3, ..]

replicate {amount} {item} -> returns a list of the same item repeated a given amount of times.

odd {item} -> returns True if item is odd.

_ -> use of this keyword means that we dont want to access this value

	e.g: [1 | _<-[1..10]] == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
	We cant access the number in _.

fst {pair_tuple} -> returns the first item in a tuple of two items.

snd {pair_tuple} -> returns the second itme in a tuple of two items.

:t {a} -> returns type of a

show {a} -> prints out stringified version of a

read {string} -> returns the object the string represent, this is used with another member of the string represented class

	e.g read "5" - 3

	or you can declare the type

	read "5" :: Int

minBound :: {type} -> if type is in the Bounded typeclass, this will return its lower limit

maxBound :: {type} -> if type is in the Bounded typeclass, this will return its upper limit

fromIntegral {Integral} -> returns a more general number which can be used in more context.

error {String} -> when this code is run a runtime error is envoked causing the program to crash 


IF THEN ELSE
-----------------

if (condition) then (result) else (default)
	- Else here is mandatory

LISTS
---------
Homogenous meaning that all elements have to have the same type.

	e.g: a = [1, 2, 3, 4]

To concatenate two lists use ++ operator in between the lists.

	a = [1, 2, 3, 4]
	b = [5, 6]

	a ++ b // [1, 2, 3, 4, 5, 6]

The ++ operator can get slow on larger sized lists, but using : to prepend to a list is instant. 
Note: you can only prepend an element onto a list, not an actual list
tldr: ++ operator takes two lists of the same type and concatenates them, : operator takes a list of elements and an element of that list to add it onto the start

	a = [1, 2, 3, 4]
	b = 5

	b : a // [5, 1, 2, 3, 4]

[] -> empty set

a = [1, 2, 3] is just equal to 1 : 2 : 3 : []

To index a list use !! operator

	e.g: a = [1, 2, 3]
	a !! 1 == 2

Lists of Lists:

	a = [[1, 2], [3, 4], [5, 6]]

They can be indexed by using !! twice.

	a !! 1 !! 1 == 4

List Equalities: First the head is compared, and if they are equal then the second elements are compared, and this goes on until the equality is satisfied to be true or false.

	[3, 4, 5] > [3, 5, 4] == False

RANGES
----------

A way to generate a list of items that can be enumarated. 

	a = [1..6] 
	a = [1, 2, 3, 4, 5, 6]

This works on numbers, characters and elements that have a successor.

	a = ['a'..'z']
	a = {alphabet}
	// Here the output will look like a string of the alphabet, the reason this is the case is because a string is a list of characters.

	a = [5..10]
	a = [5, 6, 7, 8, 9, 10]
	
Ranges can also include a steps

	a = [1, 3..20]
	a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

Steps are only expressed in the first and the second elements.

	a = [1, 2, 4, 8..20]
	This leads to an error, as you can only have one step 

Steps can be defined to go back 

	a = [5, 4..0]
	a = [5, 4, 3, 2, 1, 0]

Ranges can be used to create infinite number of elements, this is done by not specifying an upper limit 

	a = [1..]
	a = [1, 2, 3, 4, 5, ...]

Use take function to get a set amount of elements.
 
	take 10 [1..] == [1..10]

Use cycle to turn a list into an infinite list

	cycle [1, 2, 3] == [1, 2, 3, 1, 2, 3, 1, 2, 3, ...] 


Set/List Comprehension
-----------------------

Define rules like this:

	e.g: [x*2 | x<-[1..10], x*2 >= 12]

	The left hand side specifies the rule and the right hand side defines the domain the rule works in and any predicates the function is defined to. 

Filtering is when a predicated is added to our set comprehension.

Multiple predicates can be added onto the set comprehension by using the comma, predicates must all evaluate to be True for a given number to be added onto the returned list.

	e.g: [x*2 | x<-[1..100], x>50, x/=54]

You can also specify multiply variables that are used in the set comprehension with their own domain.

	e.g: [x*y | x<-[1..10], y<-[1.10]] 
	This will produce 100 items in total as each x element will nbe times by each y element

This can also be applied to strings (list of chars)

	e.g: 
	names = ["subeen", "krishna", "sujana", "sharada"]
	emails = ["@gmail.com", "@hotmail.com", "@yahoo.co.uk"]

	useremail = [n ++ e | n<-names, e<-emails]


TUPLES
-------------------------------
Tuples are like lists, but they can contain multiple types.

	(1, 2, 3) this a triple tuple. 

	(1, 2, False) is also a tuple.
	(1, 2, 4) is not the same type as the above example.

Zipping
-------
This takes two lists to make a list of pairs, where the pairs are created by matching elements in order.

	e.g: zip [1..4] ['a'..'d']
	[(1,'a'),(2,'b'),(3,'c'),(4,'d')]

If the lists aren't of the same size, then it will stop the matching process and return the list as it was so far.

	zip [1..2] ['a'..'d']
	[(1, 'a'), (2, 'b')]

We can also zip infinite list with finite lists

	zip [1..] [ x*y | x<-[1..50], y<-[1..50], x*y <50, x `mod` ==0]

TYPES/TYPECLASSES
------------------

:t {a} -> returns type of a
This will output a::{Type}, :: here means has type of.

Function type declaration

{function name} :: {param1} -> {param2} -> ... -> {paramI} -> {return1}

Types
--------

The following are Explicit Types, this is denoted with starting the type with a capital letter.

Int -> bounded integer (more efficient)
Integer -> unbounded integer
Float -> Single precision number can represent decimals
Double -> decimal with higher precision 
Bool -> can be True or False
Char -> single character
String -> [Char], list of characters

Type variable, allow for functions to handle any types. They are denoted using lower case starting letters.

Functions that use type variables are polymorphic.

Typeclasses
------------

Interface that a type choses to implement

:t (==)
	(==) :: Eq a => a -> a -> Bool

the "Eq a" means that a has to be a member of the Eq class.

Common typeclasses:=

- Eq : used for types that support equality
- Ord : used for types that can be ordered in some way
- Show : used primarily for the function show, which displays the information as a string
- Read : used to turn a string into a variable of that type, use function read.
- Enum : Using the enums to be able to enumerate through a list
- Bounded : types that are bounded to some limits
- Num : types that act like numbers, e.g: Int, Integer, Double, Float
- Integral: only includes whole numbers
- Floating: only includes floating point numbers

SYNTAX IN HASKELL 
-----------------


Pattern Matching
----------------

Writing a specific definition of a function for a specific case of the parameters. 

Pattern Matching should not be soley used as this may result into the program crashing if a unspecified case is not explained

	e.g: say5 5 = "Five"
		 say5 x = "Not Five"

Pattern Matching a list to x:xs, will only work if the list has a length of one or more

If you want to pattern match a list that has three or more elements. 

	e.g: x:y:z:zs

When pattern matching a list to x:xs, to have a copy of the entire list all you need to do is:

e.g:	func {name}@*(x:xs) = ...

	This stores the list in `name` so it can be used if needed

Guards
-------

Guards are a way of testing whether some property is true or false, if true it can execute code. 
 
say5 :: Num a => a -> String
say5 x
   | x == 5           = "Five"
   | x == 4 || x == 6 = "Close
   | otherwise        = "not close"


where keyword
-------------

The where keyword is used in functions to create local variables that can be used in the function defintions, this is useful as it can precalculate variables and also can be more consise. This is particularly useful to speedup certain functions that might take more time. 

sayNum :: (Integral a) -> a -> String
sayNum x 
	| x == target                                      = "Five"
	| x == target - nearstep || target + nearstep == 3 = "Close"
	| otherwise                                  	   = "not close"
	where target = 5
		  nearstep = 1

functions can also be defined in the where clause, this should be used when you want to keep some functions local.

let keyword
------------

let <binding> in <expression>

the variables in <binding> can be used in <expression>

let a = 9 in a+1 -> this is equal to 10

let circleArea r = 3.14 * r^2 in circleArea 5

let a=50; b=20 in a+b

if you use just the let keyword, it can be used in the interactive session but when the in keyword is used then it goes out of scope once the code is executed

case keyword
-------------

	case <expression> of <pattern> -> <result>
						 <pattern> -> <result>

This is essentially pattern matching in the function definition.
	
RECURSION 
--------------------------

Edge condition / Base condition -> this is where the recursion stops. This is needed in a recursive function as then the recursion will never stop.

Higher Order Functions
-------------------------------

Higher order functions take a function as a parameter or return a function. 

Anonymous Functions: functions with out names similiar to lambda functions 

e.g: \{params} -> {expressions}
	(\{params} -> {expressions}) {actual values}

they can be assigned to a variable by using =.

map {function} {list} : map applies the function given to each element in list and returns the values of it.

filter {predicate} {list} : filter returns a list of values which satisfy the predicate

Curried Functions: 

f :: a -> b -> c -> d

is equivalent to 

f :: a -> (b -> (c -> d))

This means f takes a parameter of type 'a' and returns another function, this function takes a parameter of type 'b' and returns a function. this function then takes a 'c' and returns a 'd'

This means ALL functions in haskell only take one parameter, it each returns a value or a function that may also return a value or another function.

Partial Function Application: 

Thus if we have an function add.

add :: Int -> (Int -> Int)
add x y = x + y

another example, this is maps type

map :: (a -> b) -> [a] -> [b]

we can rewrite this as:

map :: (a -> b) -> ([a] -> [b])

Map takes a function which takes type 'a' and returns 'b', and then it returns a function which takes a list of 'a's and returns a list of 'b's

This means that add 1, does not result into an error, it means add 1 is a new function. 

takeWhile {predicate} {list} -> keeps taking items out of the list until the predicate evaluates to false:

Folds: Functions that take a list and return a single value.

foldl {function that takes two parameters} {starting val} {list}
- this function goes from left to right applying the operator to all the items and the starting value.

foldr (\elem acc -> <term>) <start_acc> <list>
foldl (\acc elem -> <term>) <start_acc> <list>


Boolean Conditions/Operators 

True, False
&& - and 
|| - or 
/= - not equals to 
== - equals to
not (_) - nots the conditions 

DEFINITIONS AND INTERESTING STUFF
---------------------------------

Infix function - a function that is sandwiched between two operands
Prefix function - a function where parameters come after the function

Function Application - Passing paramaters to a function (this has the highest precidence when using functions in statements)

Functions cannot start with CAPITAL Letters
Use of ' is valid for function naming
If a function name ends with ' this means that the function isnt lazy or has been modified from the original. 

Strings are just a list of characters. 

Dont use floats in ranges as they can result into lost precision

Use tuples when you know how much elements go into the tuple and if they vary in types.

If you want to find out the type of a infix operator you have to use parenthesis to surround the operator.

When pattern matching make sure you define specific cases first and above the general case, this way the cases can be run properly.

FUNCTIONS/KEYWORDS
-------------------
succ {int} -> function that returns the next element after the provided parameter, e.g: succ 8 == 9

pred {int} -> function that returns the previous element befroe the provided element, only works when the element has an instance of the Enum typeclass 

min {num1} {num2} -> function that returns the lesser of the two numbers, e.g: min 3 5 == 3

max {num1} {num2} -> function that returns the greater of the two numbers, e.g: max 2 5 == 5

let (expression) -> this is used in ghci to store a value.

head {list} -> returns the first element of a list

tail {list} -> returns all elements that are not the head.

last {list} -> returns the last element of a list

init {list} -> returns all elements without the last element

length {list} -> returns length of a list

null {list} -> returns true if the list is empty 
	e.g: null [2, 3, 4] == False
		 null [] == True

reverse {list} -> reverses a given list

take {items} {list} -> extracts that many items from the start of the list

drop {items} {list} -> removes the number of items from the start of the list and returns the remaining items

maximum {list} -> returns the max item in a list
minimum {list} -> returns the min item in a list

sum {list} -> returns the sum of all the elements in a list 
product {list} -> returns the products of all elements in a list

elem {item} {list} -> returns true or false whether item is in a list
	e.g: elem 5 [1, 2, 5] == True
		 elem 6 [1, 2, 5] == False
		 5 `elem` [1, 2, 5] == True

cycle {list} -> returns an infinite list of repeated concatenated lists

	e.g: cycle [1, 2, 3] == [1, 2, 3, 1, 2, 3, 1, 2, 3, ...]

repeat {item} -> returns an infinite list consisting of only the item provided

	e.g: repeat 3 == [3, 3, 3, 3, 3, 3, 3, 3, ..]

replicate {amount} {item} -> returns a list of the same item repeated a given amount of times.

odd {item} -> returns True if item is odd.

_ -> use of this keyword means that we dont want to access this value

	e.g: [1 | _<-[1..10]] == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
	We cant access the number in _.

fst {pair_tuple} -> returns the first item in a tuple of two items.

snd {pair_tuple} -> returns the second itme in a tuple of two items.

:t {a} -> returns type of a

show {a} -> prints out stringified version of a

read {string} -> returns the object the string represent, this is used with another member of the string represented class

	e.g read "5" - 3

	or you can declare the type

	read "5" :: Int

minBound :: {type} -> if type is in the Bounded typeclass, this will return its lower limit

maxBound :: {type} -> if type is in the Bounded typeclass, this will return its upper limit

fromIntegral {Integral} -> returns a more general number which can be used in more context.

error {String} -> when this code is run a runtime error is envoked causing the program to crash 


IF THEN ELSE
-----------------

if (condition) then (result) else (default)
	- Else here is mandatory

LISTS
---------
Homogenous meaning that all elements have to have the same type.

	e.g: a = [1, 2, 3, 4]

To concatenate two lists use ++ operator in between the lists.

	a = [1, 2, 3, 4]
	b = [5, 6]

	a ++ b // [1, 2, 3, 4, 5, 6]

The ++ operator can get slow on larger sized lists, but using : to prepend to a list is instant. 
Note: you can only prepend an element onto a list, not an actual list
tldr: ++ operator takes two lists of the same type and concatenates them, : operator takes a list of elements and an element of that list to add it onto the start

	a = [1, 2, 3, 4]
	b = 5

	b : a // [5, 1, 2, 3, 4]

[] -> empty set

a = [1, 2, 3] is just equal to 1 : 2 : 3 : []

To index a list use !! operator

	e.g: a = [1, 2, 3]
	a !! 1 == 2

Lists of Lists:

	a = [[1, 2], [3, 4], [5, 6]]

They can be indexed by using !! twice.

	a !! 1 !! 1 == 4

List Equalities: First the head is compared, and if they are equal then the second elements are compared, and this goes on until the equality is satisfied to be true or false.

	[3, 4, 5] > [3, 5, 4] == False

RANGES
----------

A way to generate a list of items that can be enumarated. 

	a = [1..6] 
	a = [1, 2, 3, 4, 5, 6]

This works on numbers, characters and elements that have a successor.

	a = ['a'..'z']
	a = {alphabet}
	// Here the output will look like a string of the alphabet, the reason this is the case is because a string is a list of characters.

	a = [5..10]
	a = [5, 6, 7, 8, 9, 10]
	
Ranges can also include a steps

	a = [1, 3..20]
	a = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

Steps are only expressed in the first and the second elements.

	a = [1, 2, 4, 8..20]
	This leads to an error, as you can only have one step 

Steps can be defined to go back 

	a = [5, 4..0]
	a = [5, 4, 3, 2, 1, 0]

Ranges can be used to create infinite number of elements, this is done by not specifying an upper limit 

	a = [1..]
	a = [1, 2, 3, 4, 5, ...]

Use take function to get a set amount of elements.
 
	take 10 [1..] == [1..10]

Use cycle to turn a list into an infinite list

	cycle [1, 2, 3] == [1, 2, 3, 1, 2, 3, 1, 2, 3, ...] 


Set/List Comprehension
-----------------------

Define rules like this:

	e.g: [x*2 | x<-[1..10], x*2 >= 12]

	The left hand side specifies the rule and the right hand side defines the domain the rule works in and any predicates the function is defined to. 

Filtering is when a predicated is added to our set comprehension.

Multiple predicates can be added onto the set comprehension by using the comma, predicates must all evaluate to be True for a given number to be added onto the returned list.

	e.g: [x*2 | x<-[1..100], x>50, x/=54]

You can also specify multiply variables that are used in the set comprehension with their own domain.

	e.g: [x*y | x<-[1..10], y<-[1.10]] 
	This will produce 100 items in total as each x element will nbe times by each y element

This can also be applied to strings (list of chars)

	e.g: 
	names = ["subeen", "krishna", "sujana", "sharada"]
	emails = ["@gmail.com", "@hotmail.com", "@yahoo.co.uk"]

	useremail = [n ++ e | n<-names, e<-emails]


TUPLES
-------------------------------
Tuples are like lists, but they can contain multiple types.

	(1, 2, 3) this a triple tuple. 

	(1, 2, False) is also a tuple.
	(1, 2, 4) is not the same type as the above example.

Zipping
-------
This takes two lists to make a list of pairs, where the pairs are created by matching elements in order.

	e.g: zip [1..4] ['a'..'d']
	[(1,'a'),(2,'b'),(3,'c'),(4,'d')]

If the lists aren't of the same size, then it will stop the matching process and return the list as it was so far.

	zip [1..2] ['a'..'d']
	[(1, 'a'), (2, 'b')]

We can also zip infinite list with finite lists

	zip [1..] [ x*y | x<-[1..50], y<-[1..50], x*y <50, x `mod` ==0]

TYPES/TYPECLASSES
------------------

:t {a} -> returns type of a
This will output a::{Type}, :: here means has type of.

Function type declaration

{function name} :: {param1} -> {param2} -> ... -> {paramI} -> {return1}

Types
--------

The following are Explicit Types, this is denoted with starting the type with a capital letter.

Int -> bounded integer (more efficient)
Integer -> unbounded integer
Float -> Single precision number can represent decimals
Double -> decimal with higher precision 
Bool -> can be True or False
Char -> single character
String -> [Char], list of characters

Type variable, allow for functions to handle any types. They are denoted using lower case starting letters.

Functions that use type variables are polymorphic.

Typeclasses
------------

Interface that a type choses to implement

:t (==)
	(==) :: Eq a => a -> a -> Bool

the "Eq a" means that a has to be a member of the Eq class.

Common typeclasses:=

- Eq : used for types that support equality
- Ord : used for types that can be ordered in some way
- Show : used primarily for the function show, which displays the information as a string
- Read : used to turn a string into a variable of that type, use function read.
- Enum : Using the enums to be able to enumerate through a list
- Bounded : types that are bounded to some limits
- Num : types that act like numbers, e.g: Int, Integer, Double, Float
- Integral: only includes whole numbers
- Floating: only includes floating point numbers

SYNTAX IN HASKELL 
-----------------


Pattern Matching
----------------

Writing a specific definition of a function for a specific case of the parameters. 

Pattern Matching should not be soley used as this may result into the program crashing if a unspecified case is not explained

	e.g: say5 5 = "Five"
		 say5 x = "Not Five"

Pattern Matching a list to x:xs, will only work if the list has a length of one or more

If you want to pattern match a list that has three or more elements. 

	e.g: x:y:z:zs

When pattern matching a list to x:xs, to have a copy of the entire list all you need to do is:

e.g:	func {name}@*(x:xs) = ...

	This stores the list in `name` so it can be used if needed

Guards
-------

Guards are a way of testing whether some property is true or false, if true it can execute code. 
 
say5 :: Num a => a -> String
say5 x
   | x == 5           = "Five"
   | x == 4 || x == 6 = "Close
   | otherwise        = "not close"


where keyword
-------------

The where keyword is used in functions to create local variables that can be used in the function defintions, this is useful as it can precalculate variables and also can be more consise. This is particularly useful to speedup certain functions that might take more time. 

sayNum :: (Integral a) -> a -> String
sayNum x 
	| x == target                                      = "Five"
	| x == target - nearstep = "Close"
	| x == target + nearstep = "Close"
	| otherwise                                  	   = "not close"
	where target = 5
		  nearstep = 1

functions can also be defined in the where clause, this should be used when you want to keep some functions local.

let keyword
------------

let <binding> in <expression>

the variables in <binding> can be used in <expression>

let a = 9 in a+1 -> this is equal to 10

let circleArea r = 3.14 * r^2 in circleArea 5

let a=50; b=20 in a+b

if you use just the let keyword, it can be used in the interactive session but when the 'in' keyword is used then it goes out of scope once the code is executed

case keyword
-------------

	case <expression> of <pattern> -> <result>
						 <pattern> -> <result>

This is essentially pattern matching in the function definition.
	
RECURSION 
--------------------------

Edge condition / Base condition -> this is where the recursion stops. This is needed in a recursive function as then the recursion will never stop.

Higher Order Functions
-------------------------------

Higher order functions take a function as a parameter or return a function. 

Anonymous Functions: functions with out names similiar to lambda functions 

e.g: \{params} -> {expressions}
	(\{params} -> {expressions}) {actual values}

they can be assigned to a variable by using =.

map {function} {list} : map applies the function given to each element in list and returns the values of it.

filter {predicate} {list} : filter returns a list of values which satisfy the predicate

Curried Functions: 

f :: a -> b -> c -> d

is equivalent to 

f :: a -> (b -> (c -> d))

This means f takes a parameter of type 'a' and returns another function, this function takes a parameter of type 'b' and returns a function. this function then takes a 'c' and returns a 'd'

This means ALL functions in haskell only take one parameter, it each returns a value or a function that may also return a value or another function.

Partial Function Application: 

Thus if we have an function add.

add :: Int -> (Int -> Int)
add x y = x + y

another example, this is maps type

map :: (a -> b) -> [a] -> [b]

we can rewrite this as:

map :: (a -> b) -> ([a] -> [b])

Map takes a function which takes type 'a' and returns 'b', and then it returns a function which takes a list of 'a's and returns a list of 'b's

This means that add 1, does not result into an error, it means add 1 is a new function. 

takeWhile {predicate} {list} -> keeps taking items out of the list until the predicate evaluates to false:

Folds: Functions that take a list and return a single value.

foldl {function that takes two parameters} {starting val} {list}
- this function goes from left to right applying the operator to all the items and the starting value.

foldr (\elem acc -> <term>) <start_acc> <list>
foldl (\acc elem -> <term>) <start_acc> <list>


foldl (+) 0 [1, 2, 3, 4] is equivalent to
	==
((+)((+)((+)((+) 0 1) 2) 3) 4)

((F)((F)((F)((F) [] 1) 2) 3) 4)

foldr (+) 0 [1, 2, 3, 4] is equivalent to
	== 
((+) 1 ((+) 2((+) 3 ((+) 4 0))))

Use foldr to create new lists this is because you can use : operator which is much faster.

Right folds work on infinite lists, whereas left folds do not.

fold(l/r)1 -> the same as foldl but you do not need to specify a explicit starting value. They need to be called with a non empty list as if not they cause an error.

scan(l/r)(1) -> like fold but they report the intermediate accumulated variables as a list

Function Application with $
---------------------------------

f $ x = f x, the dollar sign has low precedence and is right associative.

sum $ map f == sum ( map f )

consider 

sum map sqrt [1..50] -> this should get us the sum of all sqaure roots from 1 to 50. But, as function application with spaces is left associative the function is equivalent to 

((sum map) sqrt) [1..50] 

which results into an error so we have to write

sum (map sqrt [1..50])

but to save keystrokes this is equivalent to 

sum $ map sqrt [1..50]

f (g (z x)) == f $ g $ z x

Function Composition
--------------------

Use the . operator, f . g == f ( g x )

MODULES
-------------------------------------------------

A haskell module is a collection of related functions, types and typeclasses.

A haskell prgram is a collection of modules, where the main module loads and calls function of other modules.

Prelude module is the module that is imported by default.

import <module name> 

to import only specified functions do this

import <module name> (<function name(s)>)

to import a module and hide certain functions

import <module name> hiding (<function name(s)>)

to import a module that has clashing names with a module that is already imported use

import qualified <module name> 

-> This will make it so that to call those functions you will have to use <module name>.<function name> 

you can also give the module a name by doing the following

import <module name> as <generic name>

Data.List
-------------
Functions relating to lists

intersperse <char> <string> -> places the character in between each character in the string

e.g:

	intersperse '.' "subeen" 
	"s.u.b.e.e.n"

intercalate <list> <list of lists> -> flattens the list of lists by putting the list in between each of the lists

e.g:

	intercalate " " ["hey", "there"]
	"hey there"

	intercalate [8] [[0], [1], [2]]
	[0, 8, 1, 8, 2]

transpose <list of lists> -> transposes a list of lists, by sswapping rows by columns.

This also does the same as taking the first element of every list and making that into a new list and then taking the second element of every list and making that into a new list, this process repeats for all elements, if elements have no more elements it is just skipped.

e.g:

	transpose [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
	[[0, 3, 6], [1, 4, 7], [2, 5, 8]]
	
fold(l/r)' -> are stricter versions of fold(l/r) that prevents overflow errors by making them not lazy. 

These errors occurs as haskell is lazy the accumulator value will not produce a value rather a promise to calculate that value.

concat <list of list> -> concatenates / flattens all lists into a single list, this will only remove one level of nestingo

concatMap <function> <list of list> -> applys function to list and the conatenates all the items

and <list of bools> -> returns True if all items are also True

or <list of bools> -> or using a list

any <predicate> <list> -> returns true if any element satisfies the predicate 

all <predicate> <list> -> returns true if all elements satisfy the predicate

iterate <function> <starting value> -> returns an infinite list with the first element being the the starting value and all other elements are the function applied to the previous element

e.g: 
	take 3 $ iterate (+3) 1
	[1, 4, 7]

splitAt <int index> <list> -> returns a tuple of the split list

e.g: 
	splitAt 3 "subeen"
	("sub", "een")

takeWhile <predicate> <list> -> goes through the list and checks if the predicate evaluates to true, if it does it takes that element, it takes elements until the predicate evaluates to false

dropWhile <predicate> <list> -> it drops items until the predicate is evaluated to false, and then returns the remaining items.

span <predicate> <list> -> returns a pair (tuple) of lists, that splits the provided list at the first instance where the predicate returns False

e.g:
	span (/=3) [1..10]
	([1, 2], [3, 4, 5, 6, 7, 8, 9, 10])

break <predicate> <list> -> does the same thing as span but only splits the list when the predicate returns true.

sort <list> -> sorts the list, elements have to be in the Ord typeclass

e.g:
	sort [2, 3, 42, 1, 4, 12, 52, 22, 2]
	[1,2,2,3,4,12,22,42,52]

group <list> -> takes a list of items that are in the Eq typeclass and returns a list of sublists of all consisting of the same item. 

e.g:
	group [1, 2, 2, 3]
	[[1], [2, 2], [3]]

inits / tails <list> -> recursively apply the init and tail function of a list and add the result to a list until the function returns nothing

e.g: 
	tails "Subeen"
	["Subeen","ubeen","been","een","en","n",""]

isInfixOf <list> <longer list> -> returns true if the first list is present in the longer list

isPrefixOf <list> <longer list> -> returns true if the the list is at the start of the longer list

isSuffixOf <list> <longer list> -> does the same as before but checks the end of the longer list

elem/notElem <item> <list of items> -> returns True if the item is present in the list or not.

partition <predicate> <list> -> returns a pair of lists, the first list contains all items of the list which satisfy the predicate and the other items are the rest.

e.g

	partition (`elem` ['a'..'z') "Subeen Regmi Is Here"
	(["ubeenegmisere"], ["S R I H"])

span / break is different to partition as they stop as soon as the predicate evaluates to false.

Maybe value -> can be either Just Something or Nothing

find <predicate> <list> -> finds the first value that evaluates the predicate to be true. returns either Just <int> or Nothing

elemIndex <item> <list> -> returns a Maybe <int>, which is the index of the item or Nothing if the item is not in the list. 

elemIndices <item> <list> -> returns a list of ints which correspond to the indexes of where the item is in the list. 

e.g:

	elemIndices 's' "subeenregmiiscool"
	[0, 11]

findIndex <predicate> <list> -> returns a Maybe Int for the index of the first element to satisfy the predicate

e.g:
	findIndex (\x -> x**2 < x) [1, 0.9, 0.12]
	Just 1

	findIndex (\x -> x**2 < x) [1, 2, 3]
	Nothing

zip(With)(3/4/5/6/7) (f) <list1> <list2> ... <listN> -> does the same as zip or zip with but can now be used with upto seven
lists

lines <string> -> splits up the original string into substring by seperating when there is a \n character. returns all substring in a new list.

e.g:

	lines "subeen\nis\ncool"
	["subeen", "is", "cool"]

unlines <list of strings> -> undoes the lines operator, and concatenates all the string and putting a \n character inbetween each string

e.g:
	unlines ["subeen", "is", "cool"]
	"subeen\nis\ncool\n" 

nub <list> -> returns a list that removes duplicates.

e.g:
	nub "subeenishere"
	"subenihr"

delete <element> <list of elements> -> removes the fist occurence of the element in the list, returns the remaining list

e.g:
	delete 'e' "subeenishere"
	"subenishere"

<list1> \\ <list2> -> returns all elements of list1 that are not in list2, essentially subtract list1 from list2/

<list1> `union` <list2> -> returns the union of the two lists, returns all items in both lists and removes duplicates

<list1> `intersect` <list2> -> returns the intersection of the two lists, returns a new list of items that are in both lists.

insert <item> <list> -> will insert an item in its correct order, it does this by going to each element and checking if it greater
or equal to the inserting item, if found the new item is inserted just before.

e.g:

	insert 4 [1, 2, 6, 3]
	[1, 2, 4, 6, 3]

Most functions e.g: length, take, drop either accept an Int or return an Int, you can prepend generic before the function to a get a more
generic version of Num

Some other functions e.g: nub, delete, group also can by changed to use a predicate instead of a fixed one, by add a By at the end.
e.g: groupBy

on Function
--------------------
from Data.Function

on <function 1 that takes two params> <func2 that takes 1 param> == 
`f` on `g` = \x y -> f (g x) (g y)

Data.Map
-------------
import qualified Data.Map as Map

Dictionaries
------------

Map.fromList <list of (k, v)> -> takes a list of key value pairs, and returns a map/dictionary.
If there are duplicate keys in the list, then last duplicate is used.

Map.empty -> create an empty map/dictionary

Map.insert <key> <value> <Map> -> inserts the (key, value) pair into the Map.

e.g:
	ghci> Map.insert 3 100 Map.empty
	fromList [(3,100)]

	ghci> Map.insert 4 5 it
	fromList [(3,100),(4,5)]

Map.null <Map> -> returns True if Map has no key value pairs

Map.size <Map> -> returns how much key value pairs are in a map

Map.singleton <key> <value> -> returns a map that only has one key value pair.

Map.member <key> <map> -> returns true/false if a key-value pair exists in a given map.

Map.map <f> <map> -> returns a map where each value undergoes the function f and replaced.

Map.filter <predicate> <map> -> filters the key-value pairs, using the predicate p

Map.toList <map> -> turns the map into a list form.

Map.keys <map> -> returns a list of keys
 
Map.values <map> -> returns a list of values

Map.fromListWith <function> <list> -> this again creates a map, but the function is run when there is two duplicate keys. It is called
with two duplicate values.

Map.insertWith <function> <map> -> if there is a duplicate it runs the function against the two values and uses that as the keys value.


Data.Set
------------------
Sets can only contain items which are unique.

import qualified Data.Set as Set

Set.fromList <list> -> creates a set using a list

Set.intersection <set1> <set2> -> returns the intersection of the two sets, a new set with elements that are present in both sets.

Set.difference <set1> <set2> -> returns the difference of set1 from set2, this means it only items in set1 that are not in set2

Set.union <set1> <set2> -> returns items that are in both or only one of the sets.

<set1> `Set.isSubsetOf` <set2> -> returns true or false depending if set1 is a subset of set2

<set1> `Set.isProperSubsetOf` <set2> -> returns true or false depending if set1 is a proper subset of set2, this means it the sets can not be the same.

Set.(filter/map/null/size/empty/singleton/insert/delete) -> these functions are all the same.

Set.toList -> turns set into list

Making our own modules
--------------------------

Create a new file, mod.hs

Then write

module mod
( function1
, function2
, function3
) where
function1 :: a -> b
function1 x = "subeen"

helper1 :: Int -> Int
helper1 n = 5

To make it so you can create a more hierarchal structure to the module

create a folder with the name of the module

Mod
|____ sphere.hs
|____ rook.hs

inside the sphere.hs

create a module Mod.sphere etc.

Use a qualified import in any of the hs files or the ghci to make sure there is no overlapping functions

Types and typeclasses
----------------------------------------------------

To create your own data types e.g: Int, Char, Bool. Use the format:

data <NameOfType> = <Constructor1> <Params> | <Constructor2> <Params> | ...

all constructors, params and the name of the type must have the first character capitalized.

the | means or, the constructors are value constructors that once successfully called return a object with type <NameOfType>

e.g:

	data Time = Date Int Int Int

so the type is Time and Date is a value constructor that will return a Time object

to make it so the type can be printable, use 

derving (Show)

at the end of the declaration

e.g:
	data Time = Date Int Int Int deriving (Show)

If your type has only one constructor then you call the constructor the types name.

To make it so you can export a type into a module do so by doing:

module Name
( Time(..)
, printTime
)  

The (..) includes all the value constructors, we could have also just written the constructors name. 

If the () are ommited then the user cannot create that object directly.

Record Syntax
---------------

One other way of declaring a data type is by doing the following

data Time = Time { day :: String
                 , month :: String
				 , year :: Int
	             } derving (Show)

This format you can access the different variables of the data type

now Haskell creates functions name day, month and year and once passing a time object with any of those function will return the correct information.

e.g:
	Time "Monday" "Feb" 2023
	month Date == "Feb" 

To create new objects you can use the syntax

Time {day = "Monday", month = "Feb", year = 2023}

Value constructor -> a constructor that takes in values to return an object
Type constructor -> a constructor that take in types to return another type

An example of a type constructor is the Maybe type.

To create a data type that will accept any types:

data Time a b c= Time { day :: a
                      , month :: b
                      , year :: c
                      } deriving (Show)

To add a typeclass constraint to the class.

data (Ord k) => Map k v = ...

But this shouldn't be used in practice, you should add this constrain into other function declarations

e.g;

	toList :: (Ord k) => Map k v -> [(k, v}]

Derived Instances
-------------------------------

Typeclass - interface that defines behaviour
You make any type, instances of a typeclass by implimenting the functions defined by the typeclass.

by including "derving (Eq)", we make it so that we can check if two things types by checking their constructor

Eq - allows for checking if two things are equal
Show - allows for printing
Read - allows for turning String into object, string has to be a call to value constructor
Ord - allows for checking what is less than, greater than etc, does this by checking which constructor was used with the first constructor being the smallest.

e.g:
	data Time = Date Int Int Int | Seconds Int
	Date < Seconds

Enum - Only works for data types that have no parameter constructors, this allows us to create ranges.
Bounded - Allows for smallest and greatest items.

Type synonyms
---------------------------

Place holder for types

type String = [Char], this just essentially means String is representing [Char]

these can be parameterised

type List k = [k]

Recursive data types
--------------------

data List a = Empty | Cons a (List a)

Fixity Declarations
--------------------

infix(r\l) (fixity score) <set of symbols that aren't letters>

The r or l specifies the if the operator is left or right accosicative, the fixity score determines which operator has precedence.

Pattern matching works by comparing constructors.

Type-classes
-----------------
Like interfaces defining some behavior

To define type classes 

class <name> a where
   (func1) -> params -> return value

how to make an instance of a type class

instance <typeclass> type where
   ...

e.g:

instance Show Time where
	show Date = "The time is..."


To make type classes a subclass of another type class

class (<typeclass1> a) => <typeclass2> a where
    ...

id -> means that it takes a parameter and return it

so typeclasses may have something like

{-# MINIMAL (f1) | (f2) | .. #-} 

this means you only need to implement either f1 or f2, there is no need to use both.


Functor typeclass
-------------------------------

Essentially things that can be mapped over.

class Functor f where
	fmap :: (a->b) -> f a -> f b

f here is a type constructor

instance Functor <type> where
	fmap f (construct1) = ..

The type must have a type constructor.

Type constructors take other types as parameters to eventually produce concrete types.


Kinds
---------
Kind is a type of a type.

use :k to find out he kind of a type

:k Int 
Int :: *

The * means that this is a concrete type.

A concrete type is a type that doesnt take any type constructors.

:k Maybe
Maybe :: * -> *

Maybe takes one concrete type and returns another concrete type.

:k Either
Either :: * -> * -> *

Either takes two concrete types, Either a b and returns another concrete type Left Right

Functors need types of kinds: * -> *


Input/Output
--------------------

putStrLn <string> -> prints out the text into the console

running the command 'ghc --make filename.hs' will compile the fileo

putStrLn has a type

putStrLn :: String -> IO (), where IO () means its an i/o action that has a result type of (), an i/o action is something that will have a side effect.

start programs like

main = do
	statement1
	statement2

getLine -> is a an I/O function that gets input from the user.

to use getLine do

	var <- getLine
	as if you do
	var = getLine
	var is assigned to the function getLine

in a do block the last function cannot get bound to any variable.

I/O actions will only be performed inside when given the name main, or when their inside a bigger I/O action composed with a do block.

return <any pure value> -> takes the pure value and turns it into an I/O action.

putStr <string> -> prints the string without a new line.
putChar <char> -> prints a character to the console
print <any show instance> -> prints whatever is the arguement into the console.

getChar -> this is an I/O action that gets a character from the user

when (<boolean condition>) <I/O action> this function is from Control.Monad, when the boolean condition is true the I/O action is executed.

sequence [<I/O actions>] -> does all the I/O actions in order


